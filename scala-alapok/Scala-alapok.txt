| \gScala alapok előadás


'\bn\s' - next (\bRETURN\s -t is kell nyomni)
'\bb\s' - back
'\b7 go\s' - go to slide 7
'\br\s' - run

---
Közönséges class -ok:

```
class A(age: Int)
var a = new A(10)
a = new A(11)

class B(val name: String)
val b = new B("d")
b.name
```


case class -ok:

```
case class Person(name:String, age:Int)

val adam = Person("Ádám", 42)
```

A case class -okkal ezeket is kapjuk: hashcode, equals, toString
Plusz serializable lesz az objektumunk
---
```
case class Person(name:String, age:Int)

val adam = Person("Ádám", 42)

adam.name = "Éva"
```

Eredmény:

<console>:82: error: reassignment to val
       adam.name = "Éva"
---
Mivel a mezők nem írhatóak helyette ezt kell csinálni:


```
case class Person(name:String, age:Int)

val adam = Person("Ádám", 42)

adam.copy(name = "Éva")
```
---
Metódus:

```
def isMajor(p: Person): Boolean = p.age > 18
```
---
Pattern matching:

```
case class Customer(name:String, company:Option[String], city:String)

def whoIsThis(c: Customer) = c match {
    case Customer(name, _, "Budapest") => s"$name is a local"
    case Customer(name, _, city) => s"$name is a visitor from $city"
}

val klara = Customer("Bito Klára", Some("DekorIt"), "Budapest")
whoIsThis(klara)

val sandor = Customer("Nagy Sándor", None, "Szeged")
whoIsThis(sandor)
```
---
Pattern matching több mélységben:

sealed abstract class Option[+A]()
case class Some[+A](val x : A) extends scala.Option[A]
case object None extends scala.Option[scala.Nothing]

```
case class Customer(name:String, company:Option[String], city:String)

def whoIsThis(c: Customer) = c match {
    case Customer(name, _, "Budapest") => s"$name is a local"
    case Customer(name, Some(co), city) =>
        s"$name is a visitor from $city working at ${co}"
    case Customer(name, None, city) => s"$name is a visitor from $city"
}

val gabor = Customer("Csúri Gábor", Some("Arcél"), "Szeged")
whoIsThis(gabor)

val sandor = Customer("Nagy Sándor", None, "Szeged")
whoIsThis(sandor)
```
---


