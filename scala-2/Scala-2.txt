| \gScala 2. előadás


'\bn\s' - next (\ENTER\s -t is kell nyomni)
'\bb\s' - back
'\b7 go\s' - go to slide 7
'\br\s' - run

---
List, Set, Map inicializálása

```
val list1 = List("Erik", "Panni")
val list2 = "Lajos" :: "Anna" :: "Erika" :: Nil

val set = Set(21, 42)

Map("list" -> list1, "set" -> set, "Sanyi" -> 1)
```
---
Pattern matching listára ???

```
val list1 = List("Erik", "Panni")
val list2 = "Lajos" :: "Anna" :: "Erika" :: Nil

def findNn(list: List[String])

```
---
```
Ne futtasd, import scala.collection.GenSeq
def quandlGetYearEndClosingPrice(symbol : String) = {
    val url =
      s"http://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY" +
      s"&symbol=$symbol&interval=1min&apikey=BXtYhdeyDHgj1_Kn5bz6"

    val data = scala.io.Source.fromURL(url).mkString.lines.toList
    val price = data(12).split("\"")(3).toDouble
    price
}
def findMax(symbols: GenSeq[String]) = {
    val startTime = System.currentTimeMillis()
    val (topStock, topPrice) =
      symbols
        .map { symbol => (symbol, quandlGetYearEndClosingPrice(symbol)) }
        .maxBy { symbolAndPrice => symbolAndPrice._2 }
    println(s"Top stock is $topStock closing at price $$$topPrice")
    val endTime = System.currentTimeMillis()
    println(s"${endTime - startTime} milliseconds")
}
val symbols = List("GOOG","INTC","AMD","AAPL","AMZN","IBM","ORCL","MSFT")
findMax(symbols.par)
```
---
Példa: IO és Java osztály használata

```
abstract class Tree
case class Sum(l: Tree, r: Tree) extends Tree
case class Var(n: String) extends Tree
case class Const(v: Int) extends Tree

type Environment = String => Int

def eval(t: Tree, env: Environment): Int = t match {
    case Sum(l, r) => eval(l, env) + eval(r, env)
    case Var(n) => env(n)
    case Const(v) => v
}

def derive(t: Tree, v: String): Tree = t match {
    case Sum(l, r) => Sum(derive(l, v), derive(r, v))
    case Var(n) if (v == n) => Const(1)
    case _ => Const(0)
}

val exp: Tree = Sum(Sum(Var("x"),Var("x")),Sum(Const(7),Var("y")))
val env: Environment = { case "x" => 5 case "y" => 7 }
println("Expression: " + exp)
println("Evaluation with x=5, y=7: " + eval(exp, env))
println("Derivative relative to x:\n " + eval(derive(exp, "x"), {case _ => -999}))
println("Derivative relative to y:\n " + derive(exp, "y"))
```
